#!/usr/bin/env python3
import json
import os
import subprocess
from pathlib import Path

ALLOWED_SKIP_VAR = "AGENTS_RETRO_SKIP_VALIDATE"
AGENT_RC_FLAG = "REQUIRE_AGENT_CI_AUDITS"


def git_root() -> Path:
    out = subprocess.check_output(["git", "rev-parse", "--show-toplevel"], text=True)
    return Path(out.strip())


def current_branch() -> str:
    out = subprocess.check_output(["git", "rev-parse", "--abbrev-ref", "HEAD"], text=True)
    branch = out.strip()
    if branch in {"HEAD", ""}:
        raise SystemExit("verify-retrospective: detached HEAD not supported")
    return branch


def load_agentrc(repo: Path) -> dict:
    agentrc = repo / ".agents" / "agentrc"
    data = {}
    if agentrc.exists():
        for line in agentrc.read_text().splitlines():
            line = line.strip()
            if not line or line.startswith("#"):
                continue
            if "=" in line:
                key, value = line.split("=", 1)
                data[key.strip()] = value.strip().strip('"')
    return data


def main() -> None:
    repo = git_root()
    branch = current_branch()
    slugged = branch.replace("/", "-")

    agentrc = load_agentrc(repo)
    require_retro = agentrc.get(AGENT_RC_FLAG, "1")
    role_prompt = agentrc.get("AGENT_CI_AGENT_ROLE", "continuous_improvement_auditor")
    if require_retro.lower() in {"0", "false", "no"}:
        return

    if os.environ.get(ALLOWED_SKIP_VAR):
        return

    reports_dir = repo / "docs" / "self-improvement" / "reports"
    markers_dir = repo / "docs" / "self-improvement" / "markers"
    marker_path = markers_dir / f"{slugged}.json"

    if not marker_path.exists():
        if not reports_dir.exists() or not any(reports_dir.glob(f"{branch}--*.json")):
            return  # nothing to validate yet
        raise SystemExit(
            "verify-retrospective: marker not found but reports exist; please run the "
            f"{role_prompt} prompt before turn_end."
        )

    try:
        marker = json.loads(marker_path.read_text())
    except Exception as exc:
        raise SystemExit(f"verify-retrospective: unable to parse {marker_path}: {exc}")

    marker_ts = marker.get("timestamp")
    if not marker_ts:
        raise SystemExit(f"verify-retrospective: marker {marker_path} missing timestamp")

    if not reports_dir.exists():
        raise SystemExit(
            "verify-retrospective: no reports directory; run the "
            f"{role_prompt} prompt before make turn_end."
        )

    expected = f"{branch}--{marker_ts}.json"
    target = reports_dir / expected
    if not target.exists():
        raise SystemExit(
            "verify-retrospective: latest marker has no matching retrospective report. "
            f"Run the {role_prompt} prompt before calling make turn_end again."
        )

    try:
        data = json.loads(target.read_text())
    except Exception as exc:
        raise SystemExit(f"verify-retrospective: unable to parse {target}: {exc}")

    if data.get("branch") != branch or data.get("marker_timestamp") != marker_ts:
        raise SystemExit(
            "verify-retrospective: report contents do not match current branch/marker; rerun the "
            f"{role_prompt} prompt."
        )

    print(
        f"verify-retrospective: found report docs/self-improvement/reports/{expected}",
        flush=True,
    )


if __name__ == "__main__":
    main()
