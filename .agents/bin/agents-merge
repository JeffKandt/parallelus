#!/usr/bin/env bash
set -euo pipefail

usage() {
  cat <<'HELP'
Usage: agents-merge <slug>

Merges feature/<slug> into the detected base branch after verifying guardrails
(plan/progress notebooks removed, clean working tree, CI checks). This helper
replaces manual git merge commands.
HELP
}

if [[ ${1:-} == "-h" || ${1:-} == "--help" ]]; then
  usage
  exit 0
fi

slug_input=${1:-}
if [[ -z "$slug_input" ]]; then
  echo "agents-merge: slug required" >&2
  usage >&2
  exit 1
fi

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# shellcheck source=../agentrc
. "${SCRIPT_DIR}/../agentrc"

repo_root=$(git rev-parse --show-toplevel 2>/dev/null || true)
if [[ -z "$repo_root" ]]; then
  echo "agents-merge: not inside a git repository" >&2
  exit 1
fi

cd "$repo_root"

install_hooks="$repo_root/.agents/bin/install-hooks"
if [[ -x "$install_hooks" ]]; then
  "$install_hooks" --quiet || true
fi

if [[ -n $(git status --porcelain) ]]; then
  echo "agents-merge: working tree dirty; commit, stash, or clean before merging" >&2
  exit 1
fi

slug=$(printf '%s' "$slug_input" | tr '[:upper:]' '[:lower:]')
slug=$(printf '%s' "$slug" | tr -c 'a-z0-9-' '-')
slug=$(printf '%s' "$slug" | sed -E 's/-+/-/g; s/^-+//; s/-+$//')
if [[ -z "$slug" ]]; then
  echo "agents-merge: slug must contain alphanumeric characters" >&2
  exit 1
fi

feature_branch="feature/$slug"
slugged_branch="${feature_branch//\//-}"

if ! git show-ref --verify --quiet "refs/heads/$feature_branch"; then
  echo "agents-merge: branch '$feature_branch' not found" >&2
  exit 1
fi

current_branch=$(git rev-parse --abbrev-ref HEAD)
if [[ "$current_branch" != "$feature_branch" ]]; then
  echo "agents-merge: switching to $feature_branch" >&2
  git checkout "$feature_branch" >/dev/null
  current_branch="$feature_branch"
fi

# Ensure branch notebooks are already folded into canonical docs.
shopt -s nullglob
plan_files=("docs/plans/feature-"*.md)
progress_files=("docs/progress/feature-"*.md)
shopt -u nullglob

if ((${#plan_files[@]} > 0)); then
  echo "agents-merge: branch plan notebooks still present:" >&2
  for f in "${plan_files[@]}"; do
    echo "  - $f" >&2
  done
  echo "Fold plan updates into docs/PLAN.md (or the canonical plan) and remove branch notebooks before merging." >&2
  exit 1
fi

if ((${#progress_files[@]} > 0)); then
  echo "agents-merge: branch progress logs still present:" >&2
  for f in "${progress_files[@]}"; do
    echo "  - $f" >&2
  done
  echo "Stitch progress notes into docs/PROGRESS.md and delete branch notebooks before merging." >&2
  exit 1
fi

# Install/refresh merge guard hook.
hook_src="$repo_root/.agents/hooks/pre-merge-commit"
hook_dst="$repo_root/.git/hooks/pre-merge-commit"
if [[ -f "$hook_src" ]]; then
  mkdir -p "$repo_root/.git/hooks"
  cp "$hook_src" "$hook_dst"
  chmod +x "$hook_dst"
fi

# Resolve senior review artifact (supports optional timestamp suffix).
resolve_review_file() {
  local branch="$1"
  local override="$2"
  if [[ -n "$override" ]]; then
    printf '%s' "$override"
    return
  fi
  python3 - "$branch" <<'PY'
import sys
from pathlib import Path

branch = sys.argv[1]
base = branch.replace('/', '-')
reviews_dir = Path('docs/reviews')
if not reviews_dir.exists():
    sys.exit(0)

direct = reviews_dir / f"{base}.md"
if direct.exists():
    print(direct)
    sys.exit(0)

candidates = []
for path in reviews_dir.glob(f"{base}-*.md"):
    try:
        candidates.append((path.stat().st_mtime, path))
    except FileNotFoundError:
        continue

if candidates:
    candidates.sort(reverse=True)
    print(candidates[0][1])
PY
}

check_review() {
  local file="$1"
  local branch="$2"
  local commit_ref="$3"
  if [[ ! -f "$file" ]]; then
    echo "agents-merge: senior architect review $file not found." >&2
    echo "Run the review using .agents/prompts/agent_roles/senior_architect.md and commit the approved report." >&2
    exit 1
  fi
  if ! grep -qi "^Reviewed-Branch:\s*$branch" "$file"; then
    echo "agents-merge: review $file must include Reviewed-Branch: $branch." >&2
    exit 1
  fi
  if ! grep -qi '^Decision:\s*approved' "$file"; then
    echo "agents-merge: review $file is not marked Decision: approved." >&2
    exit 1
  fi
  if ! grep -qi '^Reviewed-On:' "$file"; then
    echo "agents-merge: review $file must include Reviewed-On: <date>." >&2
    exit 1
  fi
  local review_commit
  review_commit=$(grep -i '^Reviewed-Commit:' "$file" | head -n1 | sed -E 's/Reviewed-Commit:[[:space:]]*//I')
  review_commit=${review_commit// /}
  if [[ -z "$review_commit" ]]; then
    echo "agents-merge: review $file must include Reviewed-Commit: <commit hash>." >&2
    exit 1
  fi
  if [[ -n "$commit_ref" && "$review_commit" != "$commit_ref" ]]; then
    if git merge-base --is-ancestor "$review_commit" "$commit_ref"; then
      diff_names=$(git diff --name-only "$review_commit" "$commit_ref")
      allow_doc_only=1
      while IFS= read -r path; do
        [[ -z "$path" ]] && continue
        case "$path" in
          docs/reviews/*|docs/plans/*|docs/progress/*|docs/PLAN.md|docs/PROGRESS.md|docs/self-improvement/markers/*|docs/self-improvement/reports/*)
            ;;
          *)
            allow_doc_only=0
            break
            ;;
        esac
      done <<< "$diff_names"
      if [[ $allow_doc_only -eq 1 ]]; then
        echo "agents-merge: review $file is on commit $review_commit; allowing doc-only follow-up commits through $commit_ref." >&2
      else
        echo "agents-merge: review $file covers commit $review_commit but feature branch is at $commit_ref with additional non-doc changes." >&2
        echo "Re-run the review against the final commit or override with AGENTS_MERGE_FORCE=1." >&2
        exit 1
      fi
    else
      echo "agents-merge: review $file covers commit $review_commit but feature branch is at $commit_ref (not an ancestor)." >&2
      echo "Re-run the review against the final commit or override with AGENTS_MERGE_FORCE=1." >&2
      exit 1
    fi
  fi
  if ! grep -qi 'Session Mode:[[:space:]]*synchronous subagent' "$file"; then
    echo "agents-merge: review $file is missing the subagent provenance line (Session Mode: synchronous subagent)." >&2
    echo "Run the senior architect review via the subagent launcher before merging." >&2
    exit 1
  fi
  if grep -Eqi 'Severity:\s*(Blocker|High)' "$file"; then
    echo "agents-merge: review $file still lists Severity: Blocker/High items." >&2
    exit 1
  fi
}

check_retrospective() {
  local marker_file="$repo_root/docs/self-improvement/markers/$slugged_branch.json"
  local reports_dir="$repo_root/docs/self-improvement/reports"
  if [[ ! -f "$marker_file" ]]; then
    echo "agents-merge: run make turn_end to record a retrospective marker before merging." >&2
    exit 1
  fi
  if [[ ! -d "$reports_dir" ]]; then
    echo "agents-merge: retrospective reports directory missing; commit auditor output before merging." >&2
    exit 1
  fi
  local report_path
  local status=0
  report_path=$(
    python3 - "$marker_file" "$reports_dir" "$feature_branch" <<'PY'
import json
import sys
from pathlib import Path

marker_path = Path(sys.argv[1])
reports_dir = Path(sys.argv[2])
branch = sys.argv[3]

try:
    marker = json.loads(marker_path.read_text())
except Exception as exc:
    print(f"agents-merge: unable to parse {marker_path}: {exc}", file=sys.stderr)
    sys.exit(2)

marker_ts = marker.get("timestamp")
if not marker_ts:
    print(f"agents-merge: marker {marker_path} missing timestamp", file=sys.stderr)
    sys.exit(3)

match = None
for path in sorted(reports_dir.glob('*.json')):
    try:
        data = json.loads(path.read_text())
    except Exception:
        continue
    if data.get("branch") == branch and data.get("marker_timestamp") == marker_ts:
        match = path
        break

if match is None:
    print(f"agents-merge: no retrospective report found for marker {marker_ts}", file=sys.stderr)
    sys.exit(4)

print(match)
PY
  ) || status=$?
  if [[ ${status:-0} -ne 0 || -z "$report_path" ]]; then
    exit 1
  fi
  echo "agents-merge: using retrospective report ${report_path#$repo_root/}" >&2
  export AGENTS_RETRO_MARKER="$marker_file"
  export AGENTS_RETRO_REPORT="$report_path"
}

current_commit=$(git rev-parse HEAD)
review_file=$(resolve_review_file "$feature_branch" "${AGENTS_MERGE_REVIEW_FILE:-}")

if [[ -z "${AGENTS_MERGE_FORCE:-}" ]]; then
  check_review "$review_file" "$feature_branch" "$current_commit"
else
  echo "agents-merge: AGENTS_MERGE_FORCE set; skipping review checks" >&2
fi

pending_ack=$(grep -Ei 'Severity:\s*(Medium|Low|Info)' "$review_file" || true)
if [[ -n "$pending_ack" ]]; then
  if [[ -z "${AGENTS_MERGE_ACK_REVIEW:-}" ]]; then
    echo "agents-merge: review $review_file notes lower-severity findings:" >&2
    echo "$pending_ack" >&2
    echo "Address them or re-run with AGENTS_MERGE_ACK_REVIEW=1 after documenting follow-ups." >&2
    exit 1
  fi
  echo "agents-merge: AGENTS_MERGE_ACK_REVIEW acknowledged; continuing despite lower-severity findings." >&2
fi

if ! make ci; then
  echo "agents-merge: make ci failed; resolve issues before merging" >&2
  exit 1
fi

# Clean up artifacts generated during CI runs (e.g., smoke test registry entries).
git checkout -- docs/agents/subagent-registry.json >/dev/null 2>&1 || true

export AGENTS_MERGE_SKIP_HOOK_CI=1
export AGENTS_MERGE_BRANCH="$feature_branch"
export AGENTS_MERGE_REVIEW_FILE="$review_file"
export AGENTS_MERGE_ACK_REVIEW="${AGENTS_MERGE_ACK_REVIEW:-}"
export AGENTS_MERGE_COMMIT="$current_commit"

check_retrospective

# Determine base branch via agents-detect.
detect_output="$(.agents/bin/agents-detect)"
base_branch=$(printf '%s\n' "$detect_output" | awk -F'=' '$1=="BASE_BRANCH" {print $2}')
has_remote=$(printf '%s\n' "$detect_output" | awk -F'=' '$1=="HAS_REMOTE" {print $2}')

if [[ -z "$base_branch" ]]; then
  echo "agents-merge: unable to determine base branch" >&2
  exit 1
fi

if ! git show-ref --verify --quiet "refs/heads/$base_branch"; then
  echo "agents-merge: checking out base branch $base_branch" >&2
  git checkout -b "$base_branch" "${BASE_REMOTE}/$base_branch" >/dev/null 2>&1 || {
    echo "agents-merge: base branch $base_branch not available locally" >&2
    exit 1
  }
else
  git checkout "$base_branch" >/dev/null
fi

if [[ "$has_remote" == true ]]; then
  git fetch "$BASE_REMOTE" >/dev/null 2>&1 || true
  git merge --ff-only "${BASE_REMOTE}/$base_branch" >/dev/null 2>&1 || true
fi

echo "agents-merge: merging $feature_branch into $base_branch" >&2
if ! git merge --no-ff "$feature_branch"; then
  echo "agents-merge: merge failed" >&2
  exit 1
fi

echo "agents-merge: deleting $feature_branch" >&2
git branch -d "$feature_branch" >/dev/null

echo "agents-merge: merge complete on $base_branch" >&2
