#!/usr/bin/env python3
"""Generate self-improvement retrospective entries at turn end."""

import json
import os
import shutil
import subprocess
from datetime import datetime, timezone
from pathlib import Path


def git_root() -> Path:
    try:
        out = subprocess.check_output(["git", "rev-parse", "--show-toplevel"], text=True)
        return Path(out.strip())
    except subprocess.CalledProcessError:
        raise SystemExit("self-retrospective: not inside a git repository")


def current_branch() -> str:
    out = subprocess.check_output(["git", "rev-parse", "--abbrev-ref", "HEAD"], text=True)
    branch = out.strip()
    if branch in {"HEAD", ""}:
        raise SystemExit("self-retrospective: detached HEAD not supported")
    return branch


def has_command(cmd: str, repo: Path) -> bool:
    if shutil.which(cmd) is not None:
        return True
    venv_path = repo / ".venv" / "bin" / cmd
    return venv_path.exists()


def append_plan_todo(plan_path: Path, text: str) -> None:
    marker = f"- [ ] {text}"
    if plan_path.exists():
        if marker in plan_path.read_text():
            return
        with plan_path.open("a", encoding="utf-8") as fh:
            fh.write(f"\n{marker}\n")


def main() -> None:
    repo = git_root()
    branch = current_branch()
    slugged_branch = branch.replace("/", "-")

    timestamp = datetime.now(timezone.utc)
    session_id = os.environ.get("SESSION_ID")

    plan_file = repo / "docs" / "plans" / f"{slugged_branch}.md"

    issues = []

    required_tools = {
        "ruff": {
            "id": "lint-tool-missing-ruff",
            "root_cause": "make ci lint phase will fail because ruff is not installed in the active environment",
            "mitigation": "Install ruff into the project virtualenv (pip install ruff) before running make ci",
            "prevention": "Add an environment validation step that checks for ruff before invoking lint",
        },
        "black": {
            "id": "formatter-tool-missing-black",
            "root_cause": "make ci lint phase will fail because black is not installed in the active environment",
            "mitigation": "Install black into the project virtualenv (pip install black) before running make ci",
            "prevention": "Add an environment validation step that checks for black before invoking lint",
        },
    }

    for tool, meta in required_tools.items():
        if has_command(tool, repo):
            continue
        issues.append({
            "id": meta["id"],
            "root_cause": meta["root_cause"],
            "mitigation": meta["mitigation"],
            "prevention": meta["prevention"],
            "evidence": f"command -v {tool} returned non-zero during retrospective scan",
        })

    log_dir = repo / "docs" / "self-improvement"
    log_dir.mkdir(parents=True, exist_ok=True)
    log_file = log_dir / f"{timestamp.date()}.jsonl"

    entry = {
        "timestamp": timestamp.isoformat(),
        "branch": branch,
        "session": session_id,
        "issues": issues,
    }

    with log_file.open("a", encoding="utf-8") as fh:
        fh.write(json.dumps(entry, ensure_ascii=False) + "\n")

    for issue in issues:
        prevention = issue.get("prevention")
        if prevention:
            append_plan_todo(plan_file, f"Prevention (Self-Improvement): {prevention}")

    rel_path = os.path.relpath(log_file, repo)
    if issues:
        print(f"self-retrospective: logged {len(issues)} issue(s) to {rel_path}")
    else:
        print(f"self-retrospective: no issues detected ({rel_path})")


if __name__ == "__main__":
    main()
