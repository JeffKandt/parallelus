#!/usr/bin/env bash
set -euo pipefail

usage() {
  cat <<'HELP'
Usage: agents-ensure-feature <slug>

Creates (or switches to) feature/<slug> from the detected base branch after
verifying the working tree is clean. Scaffolds plan/progress notebooks defined
in .agents/agentrc when missing.
HELP
}

if [[ ${1:-} == "-h" || ${1:-} == "--help" ]]; then
  usage
  exit 0
fi

slug_input=${1:-}
if [[ -z "$slug_input" ]]; then
  echo "agents-ensure-feature: slug required" >&2
  usage >&2
  exit 1
fi

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# shellcheck source=../agentrc
. "${SCRIPT_DIR}/../agentrc"

repo_root=$(git rev-parse --show-toplevel 2>/dev/null || true)
if [[ -z "$repo_root" ]]; then
  echo "agents-ensure-feature: not inside a git repository" >&2
  exit 1
fi

cd "$repo_root"

install_hooks="$repo_root/.agents/bin/install-hooks"
if [[ -x "$install_hooks" ]]; then
  "$install_hooks" --quiet || true
fi

if ! git diff --quiet || ! git diff --cached --quiet; then
  echo "agents-ensure-feature: working tree dirty; commit, stash, or clean first" >&2
  exit 1
fi

slug=$(printf '%s' "$slug_input" | tr '[:upper:]' '[:lower:]')
slug=$(printf '%s' "$slug" | tr -c 'a-z0-9-' '-')
slug=$(printf '%s' "$slug" | sed -E 's/-+/-/g; s/^-+//; s/-+$//')
if [[ -z "$slug" ]]; then
  echo "agents-ensure-feature: slug must contain alphanumeric characters" >&2
  exit 1
fi

feature_branch="feature/$slug"

# Determine base branch via agents-detect to stay consistent.
detect_output="$(.agents/bin/agents-detect)"
base_branch=$(printf '%s\n' "$detect_output" | awk -F'=' '$1=="BASE_BRANCH" {print $2}')
repo_mode=$(printf '%s\n' "$detect_output" | awk -F'=' '$1=="REPO_MODE" {print $2}')

if [[ -z "$base_branch" ]]; then
  base_branch="$DEFAULT_BASE"
fi

if [[ "$repo_mode" == "remote-connected" ]]; then
  if ! git show-ref --quiet "refs/remotes/${BASE_REMOTE}/$base_branch" && ! git show-ref --quiet "refs/heads/$base_branch"; then
    echo "agents-ensure-feature: unable to locate base branch '$base_branch'" >&2
    exit 1
  fi
else
  if ! git show-ref --quiet "refs/heads/$base_branch"; then
    base_branch=$(git rev-parse --abbrev-ref HEAD)
  fi
fi

if git show-ref --quiet "refs/heads/$feature_branch"; then
  git checkout "$feature_branch" >/dev/null
else
  if git show-ref --quiet "refs/remotes/${BASE_REMOTE}/$feature_branch"; then
    git checkout -b "$feature_branch" "${BASE_REMOTE}/$feature_branch" >/dev/null
  else
    git checkout -b "$feature_branch" "$base_branch" >/dev/null
  fi
fi

for kind in plan progress; do
  if [[ "$kind" == "plan" ]]; then
    dir="$PLAN_DIR"
  else
    dir="$PROGRESS_DIR"
  fi
  mkdir -p "$dir"
  file="$dir/${feature_branch//\//-}.md"
  if [[ ! -f "$file" ]]; then
    if [[ "$kind" == "plan" ]]; then
      cat <<EOF_PLAN >"$file"
# Branch Plan — ${feature_branch}

## Objectives
- TODO: document branch goals.

## Checklist
- [ ] TODO: outline tasks.

## Next Actions
- TODO: capture immediate steps.
EOF_PLAN
    else
      ts=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
      cat <<EOF_PROGRESS >"$file"
# Branch Progress — ${feature_branch}

## ${ts}
**Objectives**
- TODO: summarize session goals.

**Work Performed**
- TODO: describe work performed.

**Artifacts**
- TODO: list touched files.

**Next Actions**
- TODO: capture follow-ups.
EOF_PROGRESS
    fi
  fi
  printf '[agents-ensure-feature] Ensured %s\n' "$file" >&2
done

echo "✅ Ready on branch ${feature_branch}"
